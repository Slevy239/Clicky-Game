{"version":3,"sources":["components/Card/Card.js","components/Container/Container.js","components/Header/Header.js","components/Navbar/Navbar.js","components/Footer/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","name","src","image","onClick","shuffleCard","id","Container","children","Header","status","Navbar","class","total","goal","Footer","href","App","state","friends","clickedId","score","includes","setState","push","length","i","j","Math","floor","random","this","map","friend","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"y0EAaeA,G,MAVF,SAACC,GACZ,OACE,yBAAKC,UAAU,QACb,yBAAKA,UAAU,iBACb,yBAAKC,IAAKF,EAAMG,KAAMC,IAAKJ,EAAMK,MAAMC,QAAS,kBAAMN,EAAMO,YAAYP,EAAMQ,WCKvEC,MATf,SAAmBT,GACjB,OACI,yBAAKC,UAAU,aACX,yBAAKA,UAAU,OAAOD,EAAMU,YCQvBC,EAXA,SAACX,GACf,OACC,yBAAKC,UAAU,6BACd,yBAAKA,UAAU,yBACd,wBAAIA,UAAU,yBAAd,eACA,wBAAIA,UAAU,aAAd,0CACA,wBAAIA,UAAU,aAAaD,EAAMY,W,OCYtBC,G,MAlBA,SAACb,GACf,OACC,yBAAKc,MAAM,gCACV,wBAAIb,UAAU,cACb,wBAAIA,UAAU,cAGf,wBAAIA,UAAU,cACb,wBAAIA,UAAU,YAAd,UAAiCD,EAAMe,MAAvC,YAAuDf,EAAMgB,KAA7D,MAGD,wBAAIf,UAAU,cACb,wBAAIA,UAAU,iBCKHgB,G,MAlBA,SAACjB,GACf,OACC,yBAAKC,UAAU,wCACd,yBAAKA,UAAU,aACd,yBAAKA,UAAU,OACd,yBAAKA,UAAU,kBACd,yBAAKA,UAAU,oBACd,yBAAKA,UAAU,qCAAf,sBACiB,uBAAGiB,KAAK,+BAAR,mBC6CTC,E,2MA7CdC,MAAQ,CACPC,UACAC,UAAW,GACXC,MAAO,EACPP,KAAM,GACNJ,OAAQ,qC,EAGTL,YAAc,SAACC,GACd,IAAIc,EAAY,EAAKF,MAAME,UAE3B,GAAIA,EAAUE,SAAShB,GACtB,EAAKiB,SAAS,CAAEH,UAAW,GAAIC,MAAO,SAItC,GADAD,EAAUI,KAAKlB,GACU,KAArBc,EAAUK,OAAd,CAIA,EAAKF,SAAS,CAAEH,YAAWC,MAAOD,EAAUK,SAE5C,IAAK,IAAIC,EAAI,EAAGA,EAAIP,EAAQM,OAAQC,IAAK,CACxC,IAAIC,EAAIC,KAAKC,MAAMD,KAAKE,UAAYJ,EAAI,IADA,EAEX,CAAEP,EAAQQ,GAAIR,EAAQO,IAAjDP,EAAQO,GAF8B,KAE1BP,EAAQQ,GAFkB,WALxC,EAAKJ,SAAS,CAAEF,MAAO,GAAID,UAAW,GAAIV,OAAQ,c,wEAY3C,IAAD,OACR,OACC,6BACC,kBAAC,EAAD,CAAQG,MAAOkB,KAAKb,MAAMG,MAAOP,KAAM,KACvC,kBAAC,EAAD,CAAQJ,OAAQqB,KAAKb,MAAMR,SAC3B,kBAAC,EAAD,KACEqB,KAAKb,MAAMC,QAAQa,KAAI,SAACC,GAAD,OACvB,kBAAC,EAAD,CAAM5B,YAAa,EAAKA,YAAaC,GAAI2B,EAAO3B,GAAIL,KAAMgC,EAAOhC,KAAME,MAAO8B,EAAO9B,YAGvF,kBAAC,EAAD,W,GAzCc+B,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.f95a62d4.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Card.css\";\r\n\r\nconst Card = (props) => {\r\n  return (\r\n    <div className=\"card\">\r\n      <div className=\"img-container\">\r\n        <img alt={props.name} src={props.image}onClick={() => props.shuffleCard(props.id)} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\n// import \"./style.css\";\r\n\r\nfunction Container(props) {\r\n  return(\r\n      <div className=\"container\">\r\n          <div className=\"row\">{props.children}</div>\r\n      </div>\r\n      )\r\n      \r\n}\r\n\r\nexport default Container;\r\n","import React from 'react';\r\n// import '/Header.css';\r\n\r\nconst Header = (props) => {\r\n\treturn (\r\n\t\t<div className=\"jumbotron jumbotron-fluid\">\r\n\t\t\t<div className=\"container text-center\">\r\n\t\t\t\t<h1 className=\"display-4 header-main\">Clicky Game</h1>\r\n\t\t\t\t<h2 className=\"display-6\">Try not to click the same image twice!</h2>\r\n\t\t\t\t<h5 className=\"display-6\">{props.status}</h5>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\nexport default Header;\r\n","import React from 'react';\r\nimport './Navbar.css';\r\n\r\nconst Navbar = (props) => {\r\n\treturn (\r\n\t\t<nav class=\"navbar navbar-light bg-light\">\r\n\t\t\t<ul className=\"navbar-nav\">\r\n\t\t\t\t<li className=\"nav-item\"></li>\r\n\t\t\t</ul>\r\n\r\n\t\t\t<ul className=\"navbar-nav\">\r\n\t\t\t\t<li className=\"nav-item\">Score: {props.total} | Goal: {props.goal} </li>\r\n\t\t\t</ul>\r\n\r\n\t\t\t<ul className=\"navbar-nav\">\r\n\t\t\t\t<li className=\"nav-item\"></li>\r\n\t\t\t</ul>\r\n\t\t\t\r\n\t\t</nav>\r\n\t);\r\n};\r\nexport default Navbar;\r\n","import React from 'react';\r\nimport './Footer.css';\r\nconst Footer = (props) => {\r\n\treturn (\r\n\t\t<div className=\"page-footer font-small cyan darken-3\">\r\n\t\t\t<div className=\"container\">\r\n\t\t\t\t<div className=\"row\">\r\n\t\t\t\t\t<div className=\"col-md-12 py-5\">\r\n\t\t\t\t\t\t<div className=\"mb-5 flex-center\">\r\n\t\t\t\t\t\t\t<div className=\"footer-copyright text-center py-3\">\r\n\t\t\t\t\t\t\t\tÂ© 2020 Sam Levy <a href=\"https://github.com/Slevy239\"> Github</a>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Footer;\r\n\r\n","import React, { Component } from 'react';\nimport Card from './components/Card';\nimport Container from './components/Container';\nimport Header from './components/Header';\nimport friends from './Friends.json';\nimport Navbar from './components/Navbar/Navbar';\nimport Footer from './components/Footer'\n\nclass App extends Component {\n\t// Setting this.state.friends to the friends json array\n\tstate = {\n\t\tfriends,\n\t\tclickedId: [],\n\t\tscore: 0,\n\t\tgoal: 10,\n\t\tstatus: 'Click an image to begin the game!'\n\t};\n\n\tshuffleCard = (id) => {\n\t\tlet clickedId = this.state.clickedId;\n\n\t\tif (clickedId.includes(id)) {\n\t\t\tthis.setState({ clickedId: [], score: 0 });\n\t\t\treturn;\n\t\t} else {\n\t\t\tclickedId.push(id);\n\t\t\tif (clickedId.length === 10) {\n\t\t\t\tthis.setState({ score: 10, clickedId: [], status: 'You won!' });\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis.setState({ clickedId, score: clickedId.length });\n\n\t\t\tfor (let i = 0; i < friends.length; i++) {\n\t\t\t\tlet j = Math.floor(Math.random() * (i + 1));\n\t\t\t\t[ friends[i], friends[j] ] = [ friends[j], friends[i] ];\n\t\t\t}\n\t\t}\n\t};\n\t// Map over this.state.friends and render a Card component for each friend object\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<Navbar total={this.state.score} goal={10} />\n\t\t\t\t<Header status={this.state.status} />\n\t\t\t\t<Container>\n\t\t\t\t\t{this.state.friends.map((friend) => (\n\t\t\t\t\t\t<Card shuffleCard={this.shuffleCard} id={friend.id} name={friend.name} image={friend.image} />\n\t\t\t\t\t))}\n\t\t\t\t</Container>\n\t\t\t\t<Footer></Footer>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}